AWSTemplateFormatVersion: 2010-09-09
Description: Deploy Lambda Function to delete all CloudWatch log groups
Resources:
  CustomResource:
    Type: 'Custom::DeleteLogGroups'
    Properties:
      ServiceToken: !GetAtt 
        - DeleteLogGroups
        - Arn
  DeleteLogGroups:
    Type: 'AWS::Lambda::Function'
    DependsOn: S3Copy
    Properties:
      FunctionName: DeleteLogGroups
      Handler: handler.handler
      Layers: ['arn:aws:lambda:us-west-2:744348701589:layer:bash:5']
      Role: !GetAtt 
        - DeleteLogGroupsLambdaExecutionRole
        - Arn
      MemorySize: 128
      Timeout: 900
      Code:
        S3Bucket: !Ref src
        S3Key: handler.sh
      Runtime: provided
  DeleteLogGroupsLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
  src:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead
  S3Copy:
    Type: 'Custom::CopyToS3'
    Properties:
      ServiceToken: !GetAtt 
        - CopyFilesToS3
        - Arn
      S3BucketName: !Ref src
      Urls:
        - 'https://github.com/lrakai/lambda-bash-delete-cloudwatch-log-groups/raw/master/handler.zip'
  CopyFilesToS3:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt 
        - CopyS3LambdaExecutionRole
        - Arn
      Code:
        ZipFile: |
            import os
            import urllib.request
            from urllib.parse import urlparse
            import json
            import boto3
            import cfnresponse
            
            print('Loading function')
            
            s3 = boto3.resource('s3')
            
            
            def save_to_local(url):
                urlPath = urlparse(url).path
                fileName = os.path.basename(urlPath)
                filePath = '/tmp/' + fileName
                urllib.request.urlretrieve(url, filePath)
                return filePath
            
            
            def upload_to_s3(filePath, bucket):
                fileName = os.path.basename(filePath)
                s3.Object(bucket, fileName).put(Body=open(filePath, 'rb'))
            
            
            def copy_to_s3(url, bucket):
                filePath = save_to_local(url)
                upload_to_s3(filePath, bucket)
            
            
            def lambda_handler(event, context):
                print('Received event: ' + json.dumps(event, indent=2))
            
                if event['RequestType'] == 'Create':
                    # get the properties set in the CloudFormation resource
                    properties = event['ResourceProperties']
                    urls = properties['Urls']
                    bucket = properties['S3BucketName']
            
                    try:
                        for url in urls:
                            copy_to_s3(url, bucket)
            
                    except Exception as e:
                        print(e)
                        cfnresponse.send(event, context, cfnresponse.FAILED, {
                                         'Response': 'Failure'})
                        return
            
                cfnresponse.send(event, context, cfnresponse.SUCCESS,
                                 {'Response': 'Success'})
      Runtime: python3.6
  CopyS3LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: '*'
  
  S3CleanupCustomLambdaEvent:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken:
        'Fn::GetAtt':
          - EmptyBucket
          - Arn
      BucketName: !Ref src
  EmptyBucket:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role:
        'Fn::GetAtt':
          - EmptyBucketLambdaExecutionRole
          - Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import cfnresponse
          from botocore.vendored import requests


          def lambda_handler(event, context):
              
              try:
                  bucket = os.environ['bucket']
                  client = boto3.client('s3')
                  object_response_paginator = client.get_paginator('list_object_versions')

                  if event['RequestType'] == 'Delete':
                      
                      delete_marker_list = []
                      version_list = []
                      
                      for object_response_itr in object_response_paginator.paginate(Bucket=bucket):
                          if 'DeleteMarkers' in object_response_itr:
                              for delete_marker in object_response_itr['DeleteMarkers']:
                                  delete_marker_list.append({'Key': delete_marker['Key'], 'VersionId': delete_marker['VersionId']})
                      
                          if 'Versions' in object_response_itr:
                              for version in object_response_itr['Versions']:
                                  version_list.append({'Key': version['Key'], 'VersionId': version['VersionId']})
                      
                      for i in range(0, len(delete_marker_list), 1000):
                          response = client.delete_objects(
                              Bucket=bucket,
                              Delete={
                                  'Objects': delete_marker_list[i:i+1000],
                                  'Quiet': True
                              }
                          )
                          print(response)
                      
                      for i in range(0, len(version_list), 1000):
                          response = client.delete_objects(
                              Bucket=bucket,
                              Delete={
                                  'Objects': version_list[i:i+1000],
                                  'Quiet': True
                              }
                          )
                          print(response)

                  responseData = {'status':'Success'}
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData) 
              except Exception as e:
                  print(e)

                  responseData = {'status':'Failed'}
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData) 
      Runtime: python3.6
      Timeout: 500
      Environment:
        Variables:
          bucket: !Ref src
  EmptyBucketLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyName: emptyBucketPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 's3:*'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: src
                    - /*
            - Effect: Allow
              Action:
                - 'logs:*'
              Resource: 'arn:aws:logs:*:*:*'