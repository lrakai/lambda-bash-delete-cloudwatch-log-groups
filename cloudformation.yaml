AWSTemplateFormatVersion: 2010-09-09
Description: Deploy Lambda Function to delete all CloudWatch log groups
Resources:
  CustomResource:
    Type: 'Custom::DeleteLogGroups'
    Properties:
      ServiceToken: !GetAtt 
        - DeleteLogGroups
        - Arn
  DeleteLogGroups:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: DeleteLogGroups
      Handler: handler.handler
      Layers: ['arn:aws:lambda:us-west-2:744348701589:layer:bash:5']
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      MemorySize: 128
      Timeout: 900
      Code:
        ZipFile: !Join 
          - ''

          - - ''
            - 'function handler () {'
            - '   set -e'
            - ''
            - '   # Event Data is sent as the first parameter'
            - '   EVENT_DATA=$1'
            - ''
            - '   # Example of command usage'
            - '   EVENT_JSON=$(echo $EVENT_DATA | jq .)'
            - ''
            - '   aws logs describe-log-groups --query "logGroups[*].logGroupName" --output table |'
            - '   awk "{print $2}" |'
            - '   grep -v ^$ |'
            - '   tail -n +2 | # skip table title line'
            - '   while read x; do'
            - '       echo deleting log group $x'
            - '       aws logs delete-log-group --log-group-name $x 2>&1'
            - '   done'
            - ''
            - '   # This is the return value because it is being sent to stderr (>&2)'
            - '    echo "{\"success\": true}" >&2'
            - '}'
      Runtime: provided
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
  src:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead
  S3Copy:
    Type: 'Custom::CopyToS3'
    Properties:
      ServiceToken: !GetAtt 
        - CopyFilesToS3
        - Arn
      S3BucketName: !Ref src
      Urls:
        - 'https://s3-us-west-2.amazonaws.com/ecslabtest2017/ecslabblue.zip'
  CopyFilesToS3:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt 
        - CopyS3LambdaExecutionRole
        - Arn
      Code:
        ZipFile: !Join 
          - |+

          - - ''
            - import os
            - import urllib.request
            - from urllib.parse import urlparse
            - import json
            - import boto3
            - import cfnresponse
            - ''
            - print('Loading function')
            - ''
            - s3 = boto3.resource('s3')
            - ''
            - ''
            - 'def save_to_local(url):'
            - '    urlPath = urlparse(url).path'
            - '    fileName = os.path.basename(urlPath)'
            - '    filePath = ''/tmp/'' + fileName'
            - '    urllib.request.urlretrieve(url, filePath)'
            - '    return filePath'
            - ''
            - ''
            - 'def upload_to_s3(filePath, bucket):'
            - '    fileName = os.path.basename(filePath)'
            - '    s3.Object(bucket, fileName).put(Body=open(filePath, ''rb''))'
            - ''
            - ''
            - 'def copy_to_s3(url, bucket):'
            - '    filePath = save_to_local(url)'
            - '    upload_to_s3(filePath, bucket)'
            - ''
            - ''
            - 'def lambda_handler(event, context):'
            - '    print(''Received event: '' + json.dumps(event, indent=2))'
            - ''
            - '    if event[''RequestType''] == ''Create'':'
            - '        # get the properties set in the CloudFormation resource'
            - '        properties = event[''ResourceProperties'']'
            - '        urls = properties[''Urls'']'
            - '        bucket = properties[''S3BucketName'']'
            - ''
            - '        try:'
            - '            for url in urls:'
            - '                copy_to_s3(url, bucket)'
            - ''
            - '        except Exception as e:'
            - '            print(e)'
            - '            cfnresponse.send(event, context, cfnresponse.FAILED, {'
            - '                             ''Response'': ''Failure''})'
            - '            return'
            - ''
            - '    cfnresponse.send(event, context, cfnresponse.SUCCESS,'
            - '                     {''Response'': ''Success''})'
      Runtime: python3.6
  CopyS3LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: '*'